import discord
from discord.ext import commands
from ..utils.database import db, EconomyUser
import random
import asyncio

class DuelsCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.active_duels = {}  # {user_id: target_id}

    @commands.hybrid_command(name="duel", description="–í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    async def duel(self, ctx, member: discord.Member, bet: int):
        if member.id == ctx.author.id:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return

        if member.bot:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å –±–æ—Ç–∞!")
            return

        if bet < 10:
            await ctx.send("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 ü™ô")
            return

        if bet > 100000:
            await ctx.send("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 100,000 ü™ô")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ—Ä–∞
        author_user = EconomyUser.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
        if not author_user or author_user.balance < bet:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥—É—ç–ª–∏!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ü–µ–ª–∏
        target_user = EconomyUser.query.filter_by(user_id=member.id, guild_id=ctx.guild.id).first()
        if not target_user or target_user.balance < bet:
            await ctx.send(f"‚ùå –£ {member.mention} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥—É—ç–ª–∏!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –¥—É—ç–ª–∏ –ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä
        if ctx.author.id in self.active_duels:
            await ctx.send("‚ùå –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥—É—ç–ª–∏!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –¥—É—ç–ª–∏ –ª–∏ —É–∂–µ —Ü–µ–ª—å
        if member.id in self.active_duels:
            await ctx.send(f"‚ùå {member.mention} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—É—ç–ª–∏!")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å
        await ctx.send(f"{member.mention}, {ctx.author.mention} –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å —Å–æ —Å—Ç–∞–≤–∫–æ–π {bet} ü™ô! –£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤ ‚úÖ.")

        def check(reaction, user):
            return user == member and str(reaction.emoji) == '‚úÖ' and reaction.message.id == ctx.message.id

        try:
            await ctx.message.add_reaction('‚úÖ')
            reaction, user = await self.bot.wait_for('reaction_add', timeout=60.0, check=check)
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –¥—É—ç–ª—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        self.active_duels[ctx.author.id] = member.id
        self.active_duels[member.id] = ctx.author.id

        await ctx.send(f"‚öîÔ∏è {ctx.author.mention} –∏ {member.mention} –≤—Å—Ç—É–ø–∞—é—Ç –≤ –¥—É—ç–ª—å —Å–æ —Å—Ç–∞–≤–∫–æ–π {bet} ü™ô! –î—É—ç–ª—å –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(5)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (50/50)
        winner = random.choice([ctx.author, member])
        loser = ctx.author if winner == member else member

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        winner_user = EconomyUser.query.filter_by(user_id=winner.id, guild_id=ctx.guild.id).first()
        loser_user = EconomyUser.query.filter_by(user_id=loser.id, guild_id=ctx.guild.id).first()

        winner_user.balance += bet
        loser_user.balance -= bet

        db.session.commit()

        # –£–¥–∞–ª—è–µ–º –¥—É—ç–ª—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del self.active_duels[ctx.author.id]
        del self.active_duels[member.id]

        await ctx.send(f"üèÜ {winner.mention} –ø–æ–±–µ–¥–∏–ª –≤ –¥—É—ç–ª–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç {bet} ü™ô –æ—Ç {loser.mention}!")

    @commands.hybrid_command(name="duel_leaderboard", description="–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –¥—É—ç–ª—è–º")
    async def duel_leaderboard(self, ctx):
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É—ç–ª–µ–π
        # –ó–¥–µ—Å—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –ø–æ –±–∞–ª–∞–Ω—Å—É –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        top_users = EconomyUser.query.filter_by(guild_id=ctx.guild.id).order_by(EconomyUser.balance.desc()).limit(10).all()
        if not top_users:
            await ctx.send("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞ –¥—É—ç–ª—è–Ω—Ç–æ–≤.")
            return

        embed = discord.Embed(title="üèÜ –¢–æ–ø –¥—É—ç–ª—è–Ω—Ç–æ–≤", color=0xff4500)
        for i, user in enumerate(top_users, 1):
            member = ctx.guild.get_member(user.user_id)
            name = member.display_name if member else f"ID: {user.user_id}"
            embed.add_field(name=f"{i}. {name}", value=f"–ë–∞–ª–∞–Ω—Å: {user.balance} ü™ô", inline=False)

        await ctx.send(embed=embed)

async def setup(bot):
    await bot.add_cog(DuelsCog(bot))