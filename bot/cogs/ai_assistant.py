import discord
from discord.ext import commands
import aiohttp
import json
import time

class AICog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.session = aiohttp.ClientSession()
        self.ollama_url = "http://localhost:11434/api/generate"
        self.model = "llama3:8b-instruct-q4_K_M"

    async def call_ai(self, prompt, system_prompt="", model=None):
        if not model:
            model = self.model

        payload = {
            "model": model,
            "prompt": prompt,
            "system": system_prompt or "You are a helpful, creative, and concise assistant in a Discord RPG universe.",
            "stream": False,
            "temperature": 0.7,
            "top_p": 0.9,
            "repeat_penalty": 1.1
        }

        try:
            start = time.time()
            async with self.session.post(self.ollama_url, json=payload) as resp:
                if resp.status != 200:
                    error_text = await resp.text()
                    print(f"‚ùå AI Error: {error_text}")
                    return "‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è AI-–º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ Ollama."

                data = await resp.json()
                gen_time = time.time() - start
                print(f"‚úÖ AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –æ—Ç–≤–µ—Ç –∑–∞ {gen_time:.1f} —Å–µ–∫")

                return data.get('response', '‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI').strip()
        except Exception as e:
            print(f"‚ùå AI Exception: {e}")
            return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π AI. –ó–∞–ø—É—â–µ–Ω –ª–∏ Ollama?"

    @commands.hybrid_command(name="ai", description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É")
    async def ai_ask(self, ctx, *, question: str):
        await ctx.defer(ephemeral=False)
        response = await self.call_ai(question)
        if len(response) > 1900:
            response = response[:1900] + "\n... (—Å–æ–∫—Ä–∞—â–µ–Ω–æ)"
        await ctx.send(f"üß† **AI**: {response}")

    @commands.hybrid_command(name="ai_clan_desc", description="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞")
    async def ai_generate_clan_desc(self, ctx, clan_name: str):
        await ctx.defer()
        prompt = f"–ù–∞–ø–∏—à–∏ —ç–ø–∏—á–µ—Å–∫–æ–µ, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞–Ω–∞ '{clan_name}' –≤ —Ñ—ç–Ω—Ç–µ–∑–∏–π–Ω–æ-–∫–æ—Å–º–∏—á–µ—Å–∫–æ–º —Å–µ—Ç—Ç–∏–Ω–≥–µ. –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –º–æ—â–Ω—ã–µ –æ–±—Ä–∞–∑—ã."
        desc = await self.call_ai(prompt)
        await ctx.send(f"üìú **–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞ {clan_name}**:\n> {desc}")

    @commands.hybrid_command(name="ai_quest", description="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç")
    async def ai_daily_quest(self, ctx):
        await ctx.defer()
        prompt = """–ü—Ä–∏–¥—É–º–∞–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ Discord-–≤—Å–µ–ª–µ–Ω–Ω–æ–π.
–§–æ—Ä–º–∞—Ç:
üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ]
üìñ –û–ø–∏—Å–∞–Ω–∏–µ: [–æ–ø–∏—Å–∞–Ω–∏–µ —Å—é–∂–µ—Ç–∞, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
üí∞ –ù–∞–≥—Ä–∞–¥–∞: [–º–æ–Ω–µ—Ç—ã, –∫—Ä–∏—Å—Ç–∞–ª–ª—ã, –ø—Ä–µ–¥–º–µ—Ç—ã]
‚è±Ô∏è –í—Ä–µ–º—è: [—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–π–º–µ—Ç]

–°–¥–µ–ª–∞–π –∫–≤–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–º."""
        quest = await self.call_ai(prompt)
        await ctx.send(f"üåü **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç** üåü\n{quest}")

    @commands.hybrid_command(name="ai_moderate", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å")
    async def ai_moderate(self, ctx, *, text: str):
        if not ctx.author.guild_permissions.manage_messages:
            await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.", ephemeral=True)
            return

        await ctx.defer(ephemeral=True)
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç:
- –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ (0-10)
- –°–ø–∞–º–∞ (–¥–∞/–Ω–µ—Ç)
- –ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–µ—Ä–∞ (–¥–∞/–Ω–µ—Ç)
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é (—É–¥–∞–ª–∏—Ç—å/–ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å/–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)

–°–æ–æ–±—â–µ–Ω–∏–µ: "{text}"

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
  "toxicity_score": —á–∏—Å–ª–æ,
  "is_spam": –±—É–ª–µ–≤–æ,
  "violates_rules": –±—É–ª–µ–≤–æ,
  "action": "—Å—Ç—Ä–æ–∫–∞",
  "reason": "—Å—Ç—Ä–æ–∫–∞"
}}"""
        result = await self.call_ai(prompt)
        try:
            data = json.loads(result)
            embed = discord.Embed(title="üõ°Ô∏è AI –ú–æ–¥–µ—Ä–∞—Ü–∏—è", color=0xff6b6b)
            embed.add_field(name="–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å", value=f"{data.get('toxicity_score', '?')}/10", inline=True)
            embed.add_field(name="–°–ø–∞–º", value="‚úÖ" if data.get('is_spam') else "‚ùå", inline=True)
            embed.add_field(name="–ù–∞—Ä—É—à–µ–Ω–∏–µ", value="‚ö†Ô∏è" if data.get('violates_rules') else "‚úÖ", inline=True)
            embed.add_field(name="–î–µ–π—Å—Ç–≤–∏–µ", value=data.get('action', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'), inline=False)
            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=data.get('reason', '‚Äî'), inline=False)
            await ctx.send(embed=embed, ephemeral=True)
        except Exception as e:
            await ctx.send(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç AI:\n```\n{result}\n```\n–û—à–∏–±–∫–∞: {e}", ephemeral=True)

    def cog_unload(self):
        self.bot.loop.create_task(self.session.close())

async def setup(bot):
    await bot.add_cog(AICog(bot))