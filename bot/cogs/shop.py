import discord
from discord.ext import commands
from ..utils.database import db, ShopItem, EconomyUser, UserInventory, UserResources
import random


class ShopCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.hybrid_command(name="shop", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω")
    async def shop_view(self, ctx, category: str = None):
        if category:
            items = ShopItem.query.filter_by(category=category, guild_id=ctx.guild.id).all()
            if not items:
                items = ShopItem.query.filter_by(category=category).all()  # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        else:
            items = ShopItem.query.filter(ShopItem.guild_id == ctx.guild.id).all()
            if not items:
                items = ShopItem.query.all()  # –í—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –µ—Å–ª–∏ –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö

        if not items:
            await ctx.send("üõí –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for item in items:
            cat = item.category or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(item)

        # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category_name, category_items in categories.items():
            embed = discord.Embed(title=f"üè™ –ú–∞–≥–∞–∑–∏–Ω - {category_name}", color=0x00ff00)

            for item in category_items:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
                price_parts = []
                if item.price_coins > 0:
                    price_parts.append(f"{item.price_coins} ü™ô")
                if item.price_crystals > 0:
                    price_parts.append(f"{item.price_crystals} üíé")
                if hasattr(item, 'price_crypto') and item.price_crypto > 0:
                    price_parts.append(f"{item.price_crypto} ‚Çø")

                price_str = " + ".join(price_parts) if price_parts else "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
                stock_info = ""
                if item.limited:
                    if item.stock > 0:
                        stock_info = f"\nüì¶ –ù–∞ —Å–∫–ª–∞–¥–µ: {item.stock}"
                    else:
                        stock_info = "\n‚õî –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"

                embed.add_field(
                    name=f"{item.name} (ID: {item.id})",
                    value=f"{item.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n–¶–µ–Ω–∞: {price_str}{stock_info}",
                    inline=False
                )

            await ctx.send(embed=embed)

    @commands.hybrid_command(name="buy", description="–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞")
    async def buy_item(self, ctx, item_id: int, quantity: int = 1):
        if quantity < 1:
            await ctx.send("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
            return

        item = ShopItem.query.get(item_id)
        if not item:
            await ctx.send("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
        if item.limited and item.stock < quantity:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ! –î–æ—Å—Ç—É–ø–Ω–æ: {item.stock}")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = EconomyUser.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
        if not user:
            user = EconomyUser(user_id=ctx.author.id, guild_id=ctx.guild.id)
            db.session.add(user)

        res = UserResources.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
        if not res:
            res = UserResources(user_id=ctx.author.id, guild_id=ctx.guild.id)
            db.session.add(res)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        total_cost_coins = item.price_coins * quantity
        total_cost_crystals = item.price_crystals * quantity

        if user.balance < total_cost_coins:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {total_cost_coins} ü™ô")
            return

        if res.crystals < total_cost_crystals:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤! –ù—É–∂–Ω–æ: {total_cost_crystals} üíé")
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        user.balance -= total_cost_coins
        res.crystals -= total_cost_crystals

        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
        if item.limited:
            item.stock -= quantity

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        inventory_item = UserInventory.query.filter_by(
            user_id=ctx.author.id,
            guild_id=ctx.guild.id,
            item_id=item_id
        ).first()

        if inventory_item:
            inventory_item.quantity += quantity
        else:
            inventory_item = UserInventory(
                user_id=ctx.author.id,
                guild_id=ctx.guild.id,
                item_id=item_id,
                quantity=quantity
            )
            db.session.add(inventory_item)

        db.session.commit()

        await ctx.send(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {quantity}x {item.name} –∑–∞ {total_cost_coins} ü™ô –∏ {total_cost_crystals} üíé!")

    @commands.hybrid_command(name="inventory", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
    async def inventory_view(self, ctx, member: discord.Member = None):
        target = member or ctx.author

        items = UserInventory.query.filter_by(
            user_id=target.id,
            guild_id=ctx.guild.id
        ).all()

        if not items:
            await ctx.send(f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {target.mention} –ø—É—Å—Ç!")
            return

        embed = discord.Embed(title=f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {target.display_name}", color=0x8a2be2)

        for item in items:
            shop_item = ShopItem.query.get(item.item_id)
            if not shop_item:
                continue

            status = " (—ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ)" if item.equipped else ""
            embed.add_field(
                name=f"{shop_item.name} x{item.quantity}{status}",
                value=shop_item.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
                inline=False
            )

        await ctx.send(embed=embed)

    @commands.hybrid_command(name="use", description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
    async def use_item(self, ctx, item_id: int):
        inventory_item = UserInventory.query.filter_by(
            user_id=ctx.author.id,
            guild_id=ctx.guild.id,
            item_id=item_id
        ).first()

        if not inventory_item or inventory_item.quantity <= 0:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!")
            return

        shop_item = ShopItem.query.get(item_id)
        if not shop_item:
            await ctx.send("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        if not shop_item.effect_data:
            await ctx.send(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç {shop_item.name} –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!")
            return

        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø—Ä–∏–º–µ—Ä –¥–ª—è –±—É—Å—Ç–µ—Ä–æ–≤)
        effect = shop_item.effect_data
        effect_type = effect.get("type")

        if effect_type == "xp_boost":
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤
            multiplier = effect.get("value", 1.0)
            duration = effect.get("duration", 3600)  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            await ctx.send(
                f"‚ú® –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {shop_item.name}! –ü–æ–ª—É—á–µ–Ω –±—É—Å—Ç–µ—Ä –æ–ø—ã—Ç–∞ x{multiplier} –Ω–∞ {duration // 60} –º–∏–Ω—É—Ç!")

        elif effect_type == "coins_boost":
            multiplier = effect.get("value", 1.0)
            duration = effect.get("duration", 3600)
            await ctx.send(
                f"üí∞ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {shop_item.name}! –ü–æ–ª—É—á–µ–Ω –±—É—Å—Ç–µ—Ä –º–æ–Ω–µ—Ç x{multiplier} –Ω–∞ {duration // 60} –º–∏–Ω—É—Ç!")

        elif effect_type == "instant_reward":
            coins = effect.get("coins", 0)
            crystals = effect.get("crystals", 0)

            user = EconomyUser.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
            if user and coins > 0:
                user.balance += coins

            res = UserResources.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
            if res and crystals > 0:
                res.crystals += crystals

            await ctx.send(f"üéÅ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {shop_item.name} –∏ –ø–æ–ª—É—á–∏–ª–∏ {coins} ü™ô –∏ {crystals} üíé!")

        else:
            await ctx.send(f"üîß –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥–º–µ—Ç–∞ {shop_item.name} –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω!")

        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        inventory_item.quantity -= 1
        if inventory_item.quantity <= 0:
            db.session.delete(inventory_item)

        db.session.commit()

    @commands.hybrid_command(name="equip", description="–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
    async def equip_item(self, ctx, item_id: int):
        inventory_item = UserInventory.query.filter_by(
            user_id=ctx.author.id,
            guild_id=ctx.guild.id,
            item_id=item_id
        ).first()

        if not inventory_item or inventory_item.quantity <= 0:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!")
            return

        shop_item = ShopItem.query.get(item_id)
        if not shop_item:
            await ctx.send("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        if shop_item.category not in ["role", "pet", "weapon", "armor"]:
            await ctx.send(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç {shop_item.name} –Ω–µ–ª—å–∑—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å!")
            return

        # –°–Ω–∏–º–∞–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É —Å–æ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        UserInventory.query.filter(
            UserInventory.user_id == ctx.author.id,
            UserInventory.guild_id == ctx.guild.id,
            UserInventory.equipped == True
        ).update({UserInventory.equipped: False})

        # –≠–∫–∏–ø–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        inventory_item.equipped = True
        db.session.commit()

        await ctx.send(f"‚úÖ –í—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª–∏ {shop_item.name}!")


async def setup(bot):
    await bot.add_cog(ShopCog(bot))