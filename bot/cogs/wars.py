import discord
from discord.ext import commands
from ..utils.database import db, Clan, ClanMember, ClanWar
import random
import asyncio
from datetime import datetime, timedelta


class WarsCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.war_tasks = {}  # {war_id: task}

    @commands.hybrid_command(name="war_declare", description="–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É –¥—Ä—É–≥–æ–º—É –∫–ª–∞–Ω—É")
    async def declare_war(self, ctx, enemy_clan_name: str):
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–Ω –∞–≤—Ç–æ—Ä–∞
        author_clan_data = db.session.query(Clan, ClanMember).join(ClanMember, Clan.id == ClanMember.clan_id).filter(
            ClanMember.user_id == ctx.author.id,
            Clan.guild_id == ctx.guild.id
        ).first()

        if not author_clan_data:
            await ctx.send("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!")
            return

        author_clan, author_member = author_clan_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä –ª–∏–¥–µ—Ä–æ–º –∏–ª–∏ –æ—Ñ–∏—Ü–µ—Ä–æ–º
        if author_member.role not in ["leader", "officer"]:
            await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –∏–ª–∏ –æ—Ñ–∏—Ü–µ—Ä –º–æ–∂–µ—Ç –æ–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞–∂–µ—Å–∫–∏–π –∫–ª–∞–Ω
        enemy_clan = Clan.query.filter_by(name=enemy_clan_name, guild_id=ctx.guild.id).first()
        if not enemy_clan:
            await ctx.send(f"‚ùå –ö–ª–∞–Ω '{enemy_clan_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        if enemy_clan.id == author_clan.id:
            await ctx.send("‚ùå –ù–µ–ª—å–∑—è –æ–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–æ–π–Ω—ã –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –∫–ª–∞–Ω–∞–º–∏
        existing_war = ClanWar.query.filter(
            ((ClanWar.attacker_id == author_clan.id) & (ClanWar.defender_id == enemy_clan.id)) |
            ((ClanWar.attacker_id == enemy_clan.id) & (ClanWar.defender_id == author_clan.id)),
            ClanWar.status != "finished",
            ClanWar.guild_id == ctx.guild.id
        ).first()

        if existing_war:
            await ctx.send("‚ùå –ú–µ–∂–¥—É —ç—Ç–∏–º–∏ –∫–ª–∞–Ω–∞–º–∏ —É–∂–µ –∏–¥–µ—Ç –≤–æ–π–Ω–∞!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–æ–π–Ω—ã
        war_cost = 50000
        if author_clan.balance < war_cost:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞–∑–Ω–µ –∫–ª–∞–Ω–∞! –ù—É–∂–Ω–æ {war_cost} ü™ô.")
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        author_clan.balance -= war_cost
        db.session.commit()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–π–Ω–µ
        war = ClanWar(
            guild_id=ctx.guild.id,
            attacker_id=author_clan.id,
            defender_id=enemy_clan.id,
            status="preparing",
            ends_at=datetime.utcnow() + timedelta(hours=24),
            attacker_score=0,
            defender_score=0
        )
        db.session.add(war)
        db.session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.send(
            f"‚öîÔ∏è –ö–ª–∞–Ω **{author_clan.name}** –æ–±—ä—è–≤–∏–ª –≤–æ–π–Ω—É –∫–ª–∞–Ω—É **{enemy_clan.name}**! –í–æ–π–Ω–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –≤–æ–π–Ω–µ
        self.bot.loop.create_task(self.prepare_war(war.id))

    async def prepare_war(self, war_id):
        await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏

        war = ClanWar.query.get(war_id)
        if not war or war.status != "preparing":
            return

        war.status = "active"
        db.session.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞–Ω–∞—Ö
        attacker_clan = Clan.query.get(war.attacker_id)
        defender_clan = Clan.query.get(war.defender_id)

        if not attacker_clan or not defender_clan:
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤–æ–π–Ω—ã
        guild = self.bot.get_guild(war.guild_id)
        if guild:
            channel = guild.system_channel or next(
                (c for c in guild.text_channels if c.permissions_for(guild.me).send_messages), None)
            if channel:
                await channel.send(
                    f"üî• **–í–û–ô–ù–ê –ù–ê–ß–ê–õ–ê–°–¨!** üî•\n–ö–ª–∞–Ω **{attacker_clan.name}** –ø—Ä–æ—Ç–∏–≤ –∫–ª–∞–Ω–∞ **{defender_clan.name}**!\n–í–æ–π–Ω–∞ –ø—Ä–æ–¥–ª–∏—Ç—Å—è 24 —á–∞—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/war_task` –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–∫–æ–≤!")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ–π–Ω—ã
        self.bot.loop.create_task(self.end_war_timer(war_id))

    async def end_war_timer(self, war_id):
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞

        war = ClanWar.query.get(war_id)
        if not war or war.status != "active":
            return

        await self.end_war(war_id)

    async def end_war(self, war_id):
        war = ClanWar.query.get(war_id)
        if not war:
            return

        attacker_clan = Clan.query.get(war.attacker_id)
        defender_clan = Clan.query.get(war.defender_id)

        if not attacker_clan or not defender_clan:
            war.status = "finished"
            db.session.commit()
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if war.attacker_score > war.defender_score:
            winner_id = war.attacker_id
            loser_id = war.defender_id
            winner_clan = attacker_clan
            loser_clan = defender_clan
        elif war.defender_score > war.attacker_score:
            winner_id = war.defender_id
            loser_id = war.attacker_id
            winner_clan = defender_clan
            loser_clan = attacker_clan
        else:
            # –ù–∏—á—å—è
            war.status = "finished"
            war.winner_id = None
            db.session.commit()

            guild = self.bot.get_guild(war.guild_id)
            if guild:
                channel = guild.system_channel or next(
                    (c for c in guild.text_channels if c.permissions_for(guild.me).send_messages), None)
                if channel:
                    await channel.send(
                        f"‚öñÔ∏è **–í–æ–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∏—á—å–µ–π!**\n–ö–ª–∞–Ω **{attacker_clan.name}**: {war.attacker_score} –æ—á–∫–æ–≤\n–ö–ª–∞–Ω **{defender_clan.name}**: {war.defender_score} –æ—á–∫–æ–≤")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–π–Ω—ã
        war.status = "finished"
        war.winner_id = winner_id
        db.session.commit()

        # –ù–∞–≥—Ä–∞–¥—ã –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        prize = int(loser_clan.balance * 0.3)  # 30% –∫–∞–∑–Ω—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        winner_clan.balance += prize
        loser_clan.balance -= prize

        # –û–ø—ã—Ç –∫–ª–∞–Ω–∞–º
        winner_clan.experience += 1000
        loser_clan.experience += 500

        # –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–ª–∞–Ω–æ–≤ (–µ—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞)
        for clan in [winner_clan, loser_clan]:
            required_exp = clan.level * 1000
            if clan.experience >= required_exp:
                old_level = clan.level
                clan.level += 1
                clan.experience -= required_exp

        db.session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        guild = self.bot.get_guild(war.guild_id)
        if guild:
            channel = guild.system_channel or next(
                (c for c in guild.text_channels if c.permissions_for(guild.me).send_messages), None)
            if channel:
                await channel.send(
                    f"üèÜ **–í–û–ô–ù–ê –ó–ê–í–ï–†–®–ï–ù–ê!** üèÜ\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –∫–ª–∞–Ω **{winner_clan.name}**!\n–û—á–∫–∏: {war.attacker_score} - {war.defender_score}\n–ù–∞–≥—Ä–∞–¥–∞: {prize} ü™ô –∏–∑ –∫–∞–∑–Ω—ã –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ!")

    @commands.hybrid_command(name="war_status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –≤–æ–π–Ω—ã")
    async def war_status(self, ctx):
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        clan_data = db.session.query(Clan, ClanMember).join(ClanMember, Clan.id == ClanMember.clan_id).filter(
            ClanMember.user_id == ctx.author.id,
            Clan.guild_id == ctx.guild.id
        ).first()

        if not clan_data:
            await ctx.send("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!")
            return

        clan, member = clan_data

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–æ–π–Ω—É –∫–ª–∞–Ω–∞
        war = ClanWar.query.filter(
            ((ClanWar.attacker_id == clan.id) | (ClanWar.defender_id == clan.id)),
            ClanWar.status != "finished",
            ClanWar.guild_id == ctx.guild.id
        ).first()

        if not war:
            await ctx.send("‚ùå –í–∞—à –∫–ª–∞–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–π–Ω–∞—Ö.")
            return

        attacker_clan = Clan.query.get(war.attacker_id)
        defender_clan = Clan.query.get(war.defender_id)

        if not attacker_clan or not defender_clan:
            await ctx.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–π–Ω–µ.")
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        remaining_time = war.ends_at - datetime.utcnow()
        remaining_hours = int(remaining_time.total_seconds() // 3600)
        remaining_minutes = int((remaining_time.total_seconds() % 3600) // 60)

        embed = discord.Embed(title="‚öîÔ∏è –°—Ç–∞—Ç—É—Å –≤–æ–π–Ω—ã", color=0xff0000)
        embed.add_field(name="–ê—Ç–∞–∫—É—é—â–∏–π", value=f"**{attacker_clan.name}** ({war.attacker_score} –æ—á–∫–æ–≤)", inline=True)
        embed.add_field(name="–ó–∞—â–∏—â–∞—é—â–∏–π—Å—è", value=f"**{defender_clan.name}** ({war.defender_score} –æ—á–∫–æ–≤)",
                        inline=True)
        embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=war.status.capitalize(), inline=True)
        embed.add_field(name="–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏", value=f"{remaining_hours}—á {remaining_minutes}–º", inline=True)
        embed.add_field(name="–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è", value=f"<t:{int(war.ends_at.timestamp())}:R>", inline=True)

        await ctx.send(embed=embed)

    @commands.hybrid_command(name="war_task", description="–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤–æ–π–Ω—ã")
    async def war_task(self, ctx, task_type: str = "daily"):
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        clan_data = db.session.query(Clan, ClanMember).join(ClanMember, Clan.id == ClanMember.clan_id).filter(
            ClanMember.user_id == ctx.author.id,
            Clan.guild_id == ctx.guild.id
        ).first()

        if not clan_data:
            await ctx.send("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ!")
            return

        clan, member = clan_data

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–æ–π–Ω—É –∫–ª–∞–Ω–∞
        war = ClanWar.query.filter(
            ((ClanWar.attacker_id == clan.id) | (ClanWar.defender_id == clan.id)),
            ClanWar.status == "active",
            ClanWar.guild_id == ctx.guild.id
        ).first()

        if not war:
            await ctx.send("‚ùå –í–∞—à –∫–ª–∞–Ω –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–æ–π–Ω–µ!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è
        if task_type not in ["daily", "raid", "defend"]:
            await ctx.send("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π: daily, raid, defend")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
        if task_type == "daily":
            points = random.randint(10, 50)
            description = "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
        elif task_type == "raid":
            points = random.randint(50, 200)
            description = "–†–µ–π–¥ –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–∏–π –∫–ª–∞–Ω"
        else:  # defend
            points = random.randint(50, 200)
            description = "–ó–∞—â–∏—Ç–∞ —Å–≤–æ–µ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏"

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∫–ª–∞–Ω—É
        if war.attacker_id == clan.id:
            war.attacker_score += points
        else:
            war.defender_score += points

        db.session.commit()

        await ctx.send(f"‚úÖ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ '{description}' –∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ {points} –æ—á–∫–æ–≤ –∫–ª–∞–Ω—É **{clan.name}**!")

    @commands.hybrid_command(name="war_leaderboard", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∞–Ω–æ–≤ –ø–æ –≤–æ–π–Ω–∞–º")
    async def war_leaderboard(self, ctx):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∫–ª–∞–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥ –≤ –≤–æ–π–Ω–∞—Ö
        clans = Clan.query.filter_by(guild_id=ctx.guild.id).order_by(Clan.level.desc(), Clan.experience.desc()).limit(
            10).all()

        if not clans:
            await ctx.send("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª–∞–Ω–æ–≤.")
            return

        embed = discord.Embed(title="üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∞–Ω–æ–≤", color=0xffd700)

        for i, clan in enumerate(clans, 1):
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
            wins = ClanWar.query.filter(
                ClanWar.winner_id == clan.id,
                ClanWar.guild_id == ctx.guild.id
            ).count()

            embed.add_field(
                name=f"{i}. {clan.name}",
                value=f"–£—Ä–æ–≤–µ–Ω—å: {clan.level}\n–û–ø—ã—Ç: {clan.experience}\n–ü–æ–±–µ–¥: {wins}\n–ö–∞–∑–Ω–∞: {clan.balance} ü™ô",
                inline=False
            )

        await ctx.send(embed=embed)


async def setup(bot):
    await bot.add_cog(WarsCog(bot))