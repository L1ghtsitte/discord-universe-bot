import discord
from discord.ext import commands
from ..utils.database import db, EconomyUser, UserResources, UserProfession, UserInventory, MarketListing, ServerEconomy, ShopItem, UserFarm, Planet
from ..utils.crypto_engine import crypto_engine
import random
from datetime import datetime, timedelta

FARM_TYPES = {
    "grain": {"name": "–ó–µ—Ä–Ω–æ–≤–∞—è —Ñ–µ—Ä–º–∞", "base_income": 200, "upgrade_cost": 1000},
    "livestock": {"name": "–°–∫–æ—Ç–æ–≤–æ–¥—á–µ—Å–∫–∞—è —Ñ–µ—Ä–º–∞", "base_income": 300, "upgrade_cost": 1500},
    "magic": {"name": "–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Ñ–µ—Ä–º–∞", "base_income": 500, "upgrade_cost": 2500}
}

PROFESSIONS = {
    "miner": {"name": "–®–∞—Ö—Ç—ë—Ä", "specializations": ["iron", "gold", "diamond"]},
    "farmer": {"name": "–§–µ—Ä–º–µ—Ä", "specializations": ["wheat", "corn", "magic_herbs"]},
    "merchant": {"name": "–¢–æ—Ä–≥–æ–≤–µ—Ü", "specializations": ["goods", "luxury", "smuggling"]},
    "mercenary": {"name": "–ù–∞—ë–º–Ω–∏–∫", "specializations": ["sword", "bow", "magic"]},
    "alchemist": {"name": "–ê–ª—Ö–∏–º–∏–∫", "specializations": ["potions", "elixirs", "poisons"]}
}

class EconomyCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def get_user_resources(self, user_id, guild_id):
        user_res = UserResources.query.filter_by(user_id=user_id, guild_id=guild_id).first()
        if not user_res:
            user_res = UserResources(user_id=user_id, guild_id=guild_id)
            db.session.add(user_res)
            db.session.commit()
        return user_res

    def get_user_profession(self, user_id, guild_id):
        return UserProfession.query.filter_by(user_id=user_id, guild_id=guild_id).first()

    @commands.hybrid_command(name="balance", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å")
    async def balance(self, ctx, member: discord.Member = None):
        target = member or ctx.author
        user = EconomyUser.query.filter_by(user_id=target.id, guild_id=ctx.guild.id).first()
        if not user:
            user = EconomyUser(user_id=target.id, guild_id=ctx.guild.id)
            db.session.add(user)
            db.session.commit()
        res = self.get_user_resources(target.id, ctx.guild.id)
        await ctx.send(
            f"üí∞ **{target.display_name}**:\n"
            f"ü™ô –ú–æ–Ω–µ—Ç—ã: {user.balance:,}\n"
            f"üíé –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: {res.crystals:,}\n"
            f"‚Çø BitCrystal: {res.crypto_bitcrystal:.2f}\n"
            f"üåå AstroToken: {res.crypto_astrotoken:.2f}"
        )

    @commands.hybrid_command(name="daily", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É")
    async def daily(self, ctx):
        user = EconomyUser.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
        if not user:
            user = EconomyUser(user_id=ctx.author.id, guild_id=ctx.guild.id)
            db.session.add(user)

        now = datetime.utcnow()
        if user.last_daily and (now - user.last_daily).total_seconds() < 86400:
            wait = 86400 - (now - user.last_daily).total_seconds()
            hours = int(wait // 3600)
            minutes = int((wait % 3600) // 60)
            await ctx.send(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑: {hours}—á {minutes}–º")
            return

        amount = random.randint(100, 500)
        user.balance += amount
        user.last_daily = now
        db.session.commit()
        await ctx.send(f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} ü™ô!")

    @commands.hybrid_command(name="profession", description="–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é")
    async def choose_profession(self, ctx, profession: str, specialization: str = None):
        if profession not in PROFESSIONS:
            professions_list = ", ".join(PROFESSIONS.keys())
            await ctx.send(f"‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: {professions_list}")
            return

        prof_data = PROFESSIONS[profession]
        if specialization and specialization not in prof_data["specializations"]:
            specs = ", ".join(prof_data["specializations"])
            await ctx.send(f"‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è {profession}: {specs}")
            return

        prof = self.get_user_profession(ctx.author.id, ctx.guild.id)
        if prof:
            await ctx.send("‚ùå –ü—Ä–æ—Ñ–µ—Å—Å–∏—é –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!")
            return

        new_prof = UserProfession(
            user_id=ctx.author.id,
            guild_id=ctx.guild.id,
            profession=profession,
            specialization=specialization or prof_data["specializations"][0]
        )
        db.session.add(new_prof)
        db.session.commit()
        await ctx.send(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: **{prof_data['name']}** ({specialization or prof_data['specializations'][0]})! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/work` –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞.")

    @commands.hybrid_command(name="work", description="–†–∞–±–æ—Ç–∞—Ç—å –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏")
    async def work(self, ctx):
        prof = self.get_user_profession(ctx.author.id, ctx.guild.id)
        if not prof:
            await ctx.send("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: `/profession`")
            return

        now = datetime.utcnow()
        if prof.last_worked and (now - prof.last_worked).total_seconds() < 10800:
            wait = 10800 - (now - prof.last_worked).total_seconds()
            minutes = int(wait // 60)
            await ctx.send(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.")
            return

        base_rewards = {
            "miner": {"coins": 300, "resource": "iron_ore"},
            "farmer": {"coins": 250, "resource": "wheat"},
            "merchant": {"coins": 400, "resource": "gold_coin"},
            "mercenary": {"coins": 500, "resource": "battle_honor"},
            "alchemist": {"coins": 350, "resource": "magic_potion"}
        }

        reward = base_rewards.get(prof.profession, base_rewards["farmer"])
        bonus = prof.level * 10
        coins = reward["coins"] + bonus

        user = EconomyUser.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
        if not user:
            user = EconomyUser(user_id=ctx.author.id, guild_id=ctx.guild.id)
            db.session.add(user)

        user.balance += coins
        prof.last_worked = now
        prof.experience += 20
        if prof.experience >= prof.level * 100:
            old_level = prof.level
            prof.level += 1
            await ctx.send(f"üéâ –ü–æ–≤—ã—à–µ–Ω–∏–µ! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {prof.level} —É—Ä–æ–≤–Ω—è –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ {PROFESSIONS[prof.profession]['name']}!")

        db.session.commit()
        await ctx.send(f"üíº –í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–∞–∫ **{PROFESSIONS[prof.profession]['name']}** –∏ –ø–æ–ª—É—á–∏–ª–∏: **{coins} ü™ô** + **1x {reward['resource']}**!")

    @commands.hybrid_command(name="farm_create", description="–°–æ–∑–¥–∞—Ç—å —Ñ–µ—Ä–º—É")
    async def create_farm(self, ctx, farm_type: str):
        if farm_type not in FARM_TYPES:
            farms_list = ", ".join(FARM_TYPES.keys())
            await ctx.send(f"‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–µ—Ä–º—ã: {farms_list}")
            return

        existing = UserFarm.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id, farm_type=farm_type).first()
        if existing:
            await ctx.send(f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å {FARM_TYPES[farm_type]['name']}.")
            return

        cost = FARM_TYPES[farm_type]["upgrade_cost"] // 2  # –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
        user = EconomyUser.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
        if not user or user.balance < cost:
            await ctx.send(f"‚ùå –ù—É–∂–Ω–æ {cost} ü™ô –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–µ—Ä–º—ã.")
            return

        user.balance -= cost
        farm = UserFarm(
            user_id=ctx.author.id,
            guild_id=ctx.guild.id,
            farm_type=farm_type,
            level=1
        )
        db.session.add(farm)
        db.session.commit()
        await ctx.send(f"üöú –í—ã —Å–æ–∑–¥–∞–ª–∏ **{FARM_TYPES[farm_type]['name']}** –∑–∞ {cost} ü™ô!")

    @commands.hybrid_command(name="farm_harvest", description="–°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π —Å —Ñ–µ—Ä–º—ã")
    async def harvest_farm(self, ctx, farm_type: str = None):
        if farm_type:
            farms = [UserFarm.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id, farm_type=farm_type).first()]
        else:
            farms = UserFarm.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).all()

        if not farms or not farms[0]:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º!")
            return

        total_coins = 0
        harvested_farms = []
        for farm in farms:
            if not farm:
                continue
            if farm.last_harvest and (datetime.utcnow() - farm.last_harvest).total_seconds() < 14400:  # 4 —á–∞—Å–∞
                continue

            income = FARM_TYPES[farm.farm_type]["base_income"] * farm.level
            total_coins += income
            farm.last_harvest = datetime.utcnow()
            harvested_farms.append(FARM_TYPES[farm.farm_type]["name"])

        if total_coins == 0:
            await ctx.send("‚è≥ –£—Ä–æ–∂–∞–π –µ—â—ë –Ω–µ —Å–æ–∑—Ä–µ–ª. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 4 —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞.")
            return

        user = EconomyUser.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
        if not user:
            user = EconomyUser(user_id=ctx.author.id, guild_id=ctx.guild.id)
            db.session.add(user)
        user.balance += total_coins
        db.session.commit()

        await ctx.send(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ —Å —Ñ–µ—Ä–º ({', '.join(harvested_farms)}): **{total_coins} ü™ô**!")

    @commands.hybrid_command(name="market", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Ä—ã–Ω–∫–µ")
    async def market_view(self, ctx):
        listings = MarketListing.query.filter_by(guild_id=ctx.guild.id).limit(20).all()
        if not listings:
            await ctx.send("üõí –†—ã–Ω–æ–∫ –ø—É—Å—Ç. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º –ø—Ä–æ–¥–∞–≤—Ü–æ–º!")
            return

        embed = discord.Embed(title="üõí –†—ã–Ω–æ–∫ –∏–≥—Ä–æ–∫–æ–≤", color=0x00ff00)
        for l in listings:
            seller = ctx.guild.get_member(l.seller_id) or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            item = ShopItem.query.get(l.item_id)
            name = item.name if item else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
            price = f"{l.price_coins} ü™ô"
            if l.price_crystals:
                price += f" + {l.price_crystals} üíé"
            embed.add_field(
                name=f"{name} x{l.quantity}",
                value=f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller}\n–¶–µ–Ω–∞: {price}\nID: `{l.id}`",
                inline=False
            )
        await ctx.send(embed=embed)

    @commands.hybrid_command(name="sell", description="–í—ã—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂—É")
    async def sell_item(self, ctx, item_name: str, price: int, quantity: int = 1):
        if price < 1:
            await ctx.send("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

        listing = MarketListing(
            seller_id=ctx.author.id,
            guild_id=ctx.guild.id,
            item_id=1,
            price_coins=price,
            quantity=quantity
        )
        db.session.add(listing)
        db.session.commit()
        await ctx.send(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{item_name}' x{quantity} –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ {price} ü™ô! ID: `{listing.id}`")

    @commands.hybrid_command(name="buy", description="–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å —Ä—ã–Ω–∫–∞")
    async def buy_from_market(self, ctx, listing_id: int):
        listing = MarketListing.query.filter_by(id=listing_id, guild_id=ctx.guild.id).first()
        if not listing:
            await ctx.send("‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        seller = self.bot.get_user(listing.seller_id)
        if not seller:
            await ctx.send("‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user = EconomyUser.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
        if not user or user.balance < listing.price_coins:
            await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return

        user.balance -= listing.price_coins
        seller_user = EconomyUser.query.filter_by(user_id=seller.id, guild_id=ctx.guild.id).first()
        if not seller_user:
            seller_user = EconomyUser(user_id=seller.id, guild_id=ctx.guild.id)
            db.session.add(seller_user)
        seller_user.balance += listing.price_coins

        economy = ServerEconomy.query.filter_by(guild_id=ctx.guild.id).first()
        if not economy:
            economy = ServerEconomy(guild_id=ctx.guild.id)
            db.session.add(economy)
        tax = int(listing.price_coins * economy.tax_rate)
        economy.treasury += tax
        seller_user.balance -= tax

        db.session.delete(listing)
        db.session.commit()

        await ctx.send(f"üí∞ –í—ã –∫—É–ø–∏–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É {seller.mention} –∑–∞ {listing.price_coins} ü™ô (–Ω–∞–ª–æ–≥: {tax} ü™ô)!")

    @commands.hybrid_command(name="crypto", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π")
    async def crypto_menu(self, ctx):
        price_bitcrystal = crypto_engine.get_price()
        price_astrotoken = crypto_engine.get_price() * 1.5

        embed = discord.Embed(title="üí± –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –æ–±–º–µ–Ω", color=0xffd700)
        embed.add_field(name="BitCrystal (‚Çø)", value=f"–¶–µ–Ω–∞: {price_bitcrystal:.2f} ü™ô –∑–∞ 1 ‚Çø", inline=False)
        embed.add_field(name="AstroToken (üåå)", value=f"–¶–µ–Ω–∞: {price_astrotoken:.2f} ü™ô –∑–∞ 1 üåå", inline=False)
        embed.add_field(name="–ö–æ–º–∞–Ω–¥—ã", value="`/crypto buy <currency> <amount>`\n`/crypto sell <currency> <amount>`", inline=False)
        await ctx.send(embed=embed)

    @commands.hybrid_command(name="crypto_buy", description="–ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
    async def crypto_buy(self, ctx, currency: str, amount: float):
        res = self.get_user_resources(ctx.author.id, ctx.guild.id)
        user = EconomyUser.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
        if not user:
            await ctx.send("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –º–æ–Ω–µ—Ç—ã!")
            return

        price = crypto_engine.get_price()
        if currency == "astrotoken":
            price *= 1.5

        cost = int(amount * price)
        if user.balance < cost:
            await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ {cost} ü™ô.")
            return

        user.balance -= cost
        if currency == "bitcrystal":
            res.crypto_bitcrystal += amount
        elif currency == "astrotoken":
            res.crypto_astrotoken += amount
        else:
            await ctx.send("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: bitcrystal, astrotoken")
            return

        db.session.commit()
        await ctx.send(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ {amount} {currency} –∑–∞ {cost} ü™ô!")

    @commands.hybrid_command(name="crypto_sell", description="–ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
    async def crypto_sell(self, ctx, currency: str, amount: float):
        res = self.get_user_resources(ctx.author.id, ctx.guild.id)
        user = EconomyUser.query.filter_by(user_id=ctx.author.id, guild_id=ctx.guild.id).first()
        if not user:
            user = EconomyUser(user_id=ctx.author.id, guild_id=ctx.guild.id)
            db.session.add(user)

        price = crypto_engine.get_price()
        if currency == "astrotoken":
            price *= 1.5

        if currency == "bitcrystal":
            if res.crypto_bitcrystal < amount:
                await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BitCrystal!")
                return
            res.crypto_bitcrystal -= amount
        elif currency == "astrotoken":
            if res.crypto_astrotoken < amount:
                await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ AstroToken!")
                return
            res.crypto_astrotoken -= amount
        else:
            await ctx.send("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: bitcrystal, astrotoken")
            return

        earnings = int(amount * price)
        user.balance += earnings
        db.session.commit()
        await ctx.send(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ {amount} {currency} –∑–∞ {earnings} ü™ô!")

async def setup(bot):
    await bot.add_cog(EconomyCog(bot))