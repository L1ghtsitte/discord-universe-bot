import matplotlib.pyplot as plt
import io
from datetime import datetime, timedelta
import numpy as np


def generate_activity_graph(guild_id, days=7):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    fig, ax = plt.subplots(figsize=(12, 6))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    dates = [(datetime.utcnow() - timedelta(days=i)).strftime('%d.%m') for i in range(days - 1, -1, -1)]
    messages = [random.randint(500, 2000) for _ in range(days)]
    voice_hours = [random.randint(100, 800) for _ in range(days)]
    new_users = [random.randint(5, 50) for _ in range(days)]

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    ax.plot(dates, messages, marker='o', label='–°–æ–æ–±—â–µ–Ω–∏—è', linewidth=2, color='#6c5ce7')
    ax.plot(dates, voice_hours, marker='s', label='–ì–æ–ª–æ—Å–æ–≤—ã–µ —á–∞—Å—ã', linewidth=2, color='#00b894')
    ax.plot(dates, new_users, marker='^', label='–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', linewidth=2, color='#fdcb6e')

    ax.set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)', fontsize=16, fontweight='bold', pad=20)
    ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', fontsize=12)
    ax.legend(loc='upper left', fontsize=11)
    ax.grid(True, alpha=0.3)
    ax.set_facecolor('#36393f')
    fig.patch.set_facecolor('#36393f')
    ax.tick_params(colors='white', labelsize=10)
    ax.xaxis.label.set_color('white')
    ax.yaxis.label.set_color('white')
    ax.title.set_color('white')

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ
    for i, v in enumerate(messages):
        ax.annotate(str(v), xy=(i, v), xytext=(0, 5), textcoords='offset points', ha='center', va='bottom', fontsize=8,
                    color='white')
    for i, v in enumerate(voice_hours):
        ax.annotate(str(v), xy=(i, v), xytext=(0, 5), textcoords='offset points', ha='center', va='bottom', fontsize=8,
                    color='white')
    for i, v in enumerate(new_users):
        ax.annotate(str(v), xy=(i, v), xytext=(0, 5), textcoords='offset points', ha='center', va='bottom', fontsize=8,
                    color='white')

    plt.xticks(rotation=45)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png', facecolor=fig.get_facecolor(), edgecolor='none', dpi=150)
    buf.seek(0)
    plt.close()
    return buf


def generate_economy_graph(guild_id, days=30):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    fig, ax = plt.subplots(figsize=(12, 6))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = [(datetime.utcnow() - timedelta(days=i)).strftime('%d.%m') for i in range(days - 1, -1, -1)]
    total_coins = [random.randint(1000000, 5000000) for _ in range(days)]
    total_crystals = [random.randint(50000, 200000) for _ in range(days)]
    transactions = [random.randint(1000, 5000) for _ in range(days)]

    ax.plot(dates[::2], total_coins[::2], marker='o', label='–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç', linewidth=2, color='#fdcb6e')
    ax.plot(dates[::2], total_crystals[::2], marker='s', label='–í—Å–µ–≥–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤', linewidth=2, color='#00cec9')
    ax.plot(dates[::2], transactions[::2], marker='^', label='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', linewidth=2, color='#6c5ce7')

    ax.set_title('–≠–∫–æ–Ω–æ–º–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)', fontsize=16, fontweight='bold', pad=20)
    ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', fontsize=12)
    ax.legend(loc='upper left', fontsize=11)
    ax.grid(True, alpha=0.3)
    ax.set_facecolor('#36393f')
    fig.patch.set_facecolor('#36393f')
    ax.tick_params(colors='white', labelsize=10)
    ax.xaxis.label.set_color('white')
    ax.yaxis.label.set_color('white')
    ax.title.set_color('white')

    plt.xticks(rotation=45)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png', facecolor=fig.get_facecolor(), edgecolor='none', dpi=150)
    buf.seek(0)
    plt.close()
    return buf


def generate_clan_wars_graph(guild_id, months=6):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω"""
    fig, ax = plt.subplots(figsize=(12, 6))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    months_labels = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω']
    wars_count = [random.randint(3, 10) for _ in range(months)]
    participants = [random.randint(50, 200) for _ in range(months)]
    rewards = [random.randint(100000, 500000) for _ in range(months)]

    x = np.arange(len(months_labels))
    width = 0.25

    ax.bar(x - width, wars_count, width, label='–í–æ–π–Ω', color='#e17055')
    ax.bar(x, participants, width, label='–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤', color='#00b894')
    ax.bar(x + width, rewards, width, label='–ù–∞–≥—Ä–∞–¥ (—Ç—ã—Å. ü™ô)', color='#6c5ce7')

    ax.set_title('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∞–Ω–æ–≤—ã—Ö –≤–æ–π–Ω', fontsize=16, fontweight='bold', pad=20)
    ax.set_xlabel('–ú–µ—Å—è—Ü', fontsize=12)
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', fontsize=12)
    ax.set_xticks(x)
    ax.set_xticklabels(months_labels)
    ax.legend(loc='upper left', fontsize=11)
    ax.grid(True, alpha=0.3)
    ax.set_facecolor('#36393f')
    fig.patch.set_facecolor('#36393f')
    ax.tick_params(colors='white', labelsize=10)
    ax.xaxis.label.set_color('white')
    ax.yaxis.label.set_color('white')
    ax.title.set_color('white')

    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png', facecolor=fig.get_facecolor(), edgecolor='none', dpi=150)
    buf.seek(0)
    plt.close()
    return buf


def generate_level_distribution_graph(guild_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π"""
    fig, ax = plt.subplots(figsize=(12, 6))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    levels = list(range(1, 51))
    players = [int(1000 * np.exp(-((x - 10) / 15) ** 2)) for x in
               levels]  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –ø–∏–∫–æ–º –Ω–∞ 10 —É—Ä–æ–≤–Ω–µ

    ax.bar(levels, players, color='#6c5ce7', alpha=0.7, edgecolor='white', linewidth=0.5)

    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –∏–≥—Ä–æ–∫–æ–≤', fontsize=16, fontweight='bold', pad=20)
    ax.set_xlabel('–£—Ä–æ–≤–µ–Ω—å', fontsize=12)
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤', fontsize=12)
    ax.grid(True, alpha=0.3)
    ax.set_facecolor('#36393f')
    fig.patch.set_facecolor('#36393f')
    ax.tick_params(colors='white', labelsize=10)
    ax.xaxis.label.set_color('white')
    ax.yaxis.label.set_color('white')
    ax.title.set_color('white')

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    mean_level = sum(l * p for l, p in zip(levels, players)) / sum(players)
    ax.axvline(x=mean_level, color='red', linestyle='--', linewidth=2, label=f'–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {mean_level:.1f}')
    ax.legend(loc='upper right', fontsize=11)

    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png', facecolor=fig.get_facecolor(), edgecolor='none', dpi=150)
    buf.seek(0)
    plt.close()
    return buf